// Generated by gencpp from file tek4030_visual_servoing_msgs/FeatureVector.msg
// DO NOT EDIT!


#ifndef TEK4030_VISUAL_SERVOING_MSGS_MESSAGE_FEATUREVECTOR_H
#define TEK4030_VISUAL_SERVOING_MSGS_MESSAGE_FEATUREVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tek4030_visual_servoing_msgs
{
template <class ContainerAllocator>
struct FeatureVector_
{
  typedef FeatureVector_<ContainerAllocator> Type;

  FeatureVector_()
    : s()  {
    }
  FeatureVector_(const ContainerAllocator& _alloc)
    : s(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _s_type;
  _s_type s;





  typedef boost::shared_ptr< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureVector_

typedef ::tek4030_visual_servoing_msgs::FeatureVector_<std::allocator<void> > FeatureVector;

typedef boost::shared_ptr< ::tek4030_visual_servoing_msgs::FeatureVector > FeatureVectorPtr;
typedef boost::shared_ptr< ::tek4030_visual_servoing_msgs::FeatureVector const> FeatureVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator1> & lhs, const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator1> & lhs, const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tek4030_visual_servoing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d78041f69764b98461f668e20573e9de";
  }

  static const char* value(const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd78041f69764b984ULL;
  static const uint64_t static_value2 = 0x61f668e20573e9deULL;
};

template<class ContainerAllocator>
struct DataType< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tek4030_visual_servoing_msgs/FeatureVector";
  }

  static const char* value(const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] s\n"
;
  }

  static const char* value(const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tek4030_visual_servoing_msgs::FeatureVector_<ContainerAllocator>& v)
  {
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.s[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEK4030_VISUAL_SERVOING_MSGS_MESSAGE_FEATUREVECTOR_H
